STANDALONE_FULL_XML_LOC=${JBOSS_HOME}/standalone/configuration/caim-standalone-config.xml
LOG_FILE=verifystatus.log
PROP_FILE=/solution/$CONFIG/data/environment.properties
PROV_PROP_FILE=$JBOSS_USER_HOME/provisioning.properties

export CLASSPATH=$CLASSPATH:/opt/verify/log4j.jar:/opt/verify/idmutils.jar:/opt/verify/cryptojFIPS.jar:/opt/verify/sqljdbc4-2.0.jar:/opt/verify/mysql-connector-java-5.1.17.jar:/opt/verify
imobjectstoredb_output="false"

_log_to_file()
{
	if [ ! "x$LOG_FILE" = "x" ]
	then
		if [ "x$1" = "x" ]
		then
			echo >> $LOG_FILE
		else
			echo "`date` : $*" >> $LOG_FILE
		fi
	fi
}
_print_and_log()
{
	echo "$1"
	_log_to_file $*
}
_start_msg()
{
	_print_and_log
	_print_and_log "The script to verify status started at `date`"
	_print_and_log
}

_end_msg()
{
	_print_and_log
	_print_and_log "The script to verify status completed at `date`"
	_print_and_log
}
############ Check for database connection ##############
############ Invokes java utility #######################
_checkDBConn()
{
	_print_and_log "Checking $1";
	java_output="$(java DatabaseConnectionCheck $STANDALONE_FULL_XML_LOC $1)" 
	imobjectstoredb_output=`echo $java_output | grep -i 'response :' | awk -F':' '{print $2}' | awk -F ' ' '{print $1}'`
	if [ "$imobjectstoredb_output" = "false" ]; then
		errordb_output=`echo $java_output | grep -i 'error :' | cut -d':' -f3-`
		_log_to_file "Failed to connect to $1 . $errordb_output"
		_print_and_log "[Failed]"

	else
		_print_and_log "[Success]"
		retval=0
	fi
}

######################CA Directory Check##############
_checkCADirConn()
{
	_print_and_log "[Checking CA Directory usersotre]"
	host=$(grep -Po "(?<=^ca.dir.hostname=).*" $PROP_FILE)
	port=$(grep -Po "(?<=^ca.dir.port=).*" $PROP_FILE)

	host="${host%"${host##*[![:space:]]}"}"
	port="${port%"${port##*[![:space:]]}"}"

	while [ "$i" -le "$TIME_OUT" ]; do
		_print_and_log "checking connection ..."
		curl -u uid=superuser,ou=users,ou=northamerica,dc=forwardinc,dc=ca:CAdemo123 "ldap://$host:$port"
		if [ $? -eq 0 ]; then
     			_print_and_log "[CA Directory Host - $host:$port]"
      			_print_and_log "[Success]"
			retval=0
			break
		else
     			_print_and_log "[No CA Directory Connection]"
     			_print_and_log "[Failed]"
			
			i=`expr $i + 10`
	              
			_print_and_log "[Sleeping for 10 seconds and retrying ...]"
			sleep 10
			
		fi
	done
}
######################CA Provisioning Server Check##############
_checkProvSrvConn()
{
	 _print_and_log "[Checking Provisioning Server]"
    provhost=$(grep -Po "(?<=^IM_PS_HOST=).*" $PROV_PROP_FILE)
        
	provport=$(grep -Po "(?<=^IM_PS_ROUTER_PORT=).*" $PROV_PROP_FILE)
       
	provuser=$(grep -Po "(?<=^REPOSITORY_USERNAME=).*" $PROV_PROP_FILE)
        
	provpasswd=$(grep -Po "(?<=^REPOSITORY_PASSWORD=).*" $PROV_PROP_FILE)


        provhost="${provhost%"${provhost##*[![:space:]]}"}"
        provport="${provport%"${provport##*[![:space:]]}"}"
        provuser="${provuser%"${provuser##*[![:space:]]}"}"
        provpasswd="${provpasswd%"${provpasswd##*[![:space:]]}"}"
        #imps_passwd="$(openssl base64 -d <<< $provpasswd)"
		imps_passwd="$(java -cp /opt/utils/base64util.jar:/opt/utils/cacommons.jar DecodeBase64AsUTF8 $provpasswd)"

	while [ "$i" -le "$TIME_OUT" ]; do
                _print_and_log "checking connection ..."
#               exec 3>/dev/tcp/${provhost}/${provport}
				echo Trying curl -u "eTGlobalUserName=${provuser},eTGlobalUserContainerName=Global Users,eTNamespaceName=CommonObjects,dc=im,dc=eta:${imps_passwd}" "ldap://${provhost}:${provport}"
                curl -u "eTGlobalUserName=${provuser},eTGlobalUserContainerName=Global Users,eTNamespaceName=CommonObjects,dc=im,dc=eta:${imps_passwd}" "ldap://${provhost}:${provport}"
                if [ $? -eq 0 ]; then
                        _print_and_log "[Provisioning Server Host - $provhost:$provport]"
                        _print_and_log "[Success]"
			retval=0
                        break
                else
                        _print_and_log "[No Provisioning Server Connection]"
                        _print_and_log "[Failed]"

                        i=`expr $i + 10`

                        _print_and_log "[Sleeping for 10 seconds and retrying ...]"
                        sleep 10

                fi
        done
}

######################CA Connector Server Check##############
_checkConnSrvConn()
{

	 _print_and_log "[Checking Java Connector Server]"
	jcshost=$(grep -Po "(?<=^IM_CONNECTOR_SERVER=).*" $PROV_PROP_FILE)

	jcsport=$(grep -Po "(?<=^IM_CONNECTOR_SERVER_LDAP_PORT=).*" $PROV_PROP_FILE)

	jcshost="${jcshost%"${jcshost##*[![:space:]]}"}"
	jcsport="${jcsport%"${jcsport##*[![:space:]]}"}"
echo $jcshost
echo $jcsport
        while [ "$i" -le "$TIME_OUT" ]; do
                _print_and_log "checking connection ..."
		curl -u uid=admin,ou=system:HelloWorld "ldap://$jcshost:$jcsport"
                if [ $? -eq 0 ]; then
                        _print_and_log "[Connector Server Host - $jcsport:$jcsport]"
                        _print_and_log "[Success]"
                        retval=0
                        break
                else
                        _print_and_log "[No Connector Server Connection]"
                        _print_and_log "[Failed]"

                        i=`expr $i + 10`
                        _print_and_log "[Sleeping for 10 seconds and retrying ...]"
                        sleep 10

                fi
        done
}

_start_msg

######### Checking JAVA HOME #############
_print_and_log "Checking JAVA HOME"
if [ -z "$JAVA_HOME" ]; then
    _print_and_log "Need to set JAVA HOME"
	_print_and_log "[Failed]"
#   exit 1
else
	_print_and_log "[Success]"
	_print_and_log "Java home is set : $JAVA_HOME"
fi

######### Checking JBOSS HOME #############
_print_and_log "Checking JBOSS HOME"
if [ -z "$JBOSS_HOME" ]; then
    _print_and_log "Need to set JBOSS HOME"
	_print_and_log "[Failed]"
#    exit 1
else
	_print_and_log "[Success]"
	_print_and_log "Jboss home is set : $JBOSS_HOME"
fi

######### Checking iam_im.ear folder exist or not #############
if [ ! -d ${JBOSS_HOME}/standalone/deployments/iam_im.ear ]; then
     _print_and_log "iam_im.ear directory not found!. Exiting..."
#    exit 1
fi


#####################Mail Server Check################
#Provide the mail smtp host name and port
emailhost=$(grep -Po "(?<=^mail.smtp.host=).*" $PROP_FILE)

emailport=$(grep -Po "(?<=^mail.smtp.port=).*" $PROP_FILE)

emailhost="${emailhost%"${emailhost##*[![:space:]]}"}"
emailport="${emailport%"${emailport##*[![:space:]]}"}"

#exec 3>/dev/tcp/${emailhost}/${emailport}
#if [ $? -eq 0 ]
#then
#     _print_and_log "Mail Server Host - $emailhost:$emailport"
#      _print_and_log "[Success]"
#else
#     _print_and_log "No Mail Server Host configured"
#     _print_and_log "[Failed]"
#fi

############# Checking castylesr5.1.1.ear folder exist or not ##################
if [ ! -d ${JBOSS_HOME}/standalone/deployments/castylesr5.1.1.ear ]; then
     _print_and_log "castylesr5.1.1.ear directory not found!. Exiting..."
#    exit 1
fi

############# Checking environment.properties file exist or not ##################
if [ ! -f /solution/$CONFIG/data/environment.properties ]; then
	_print_and_log "environment.properties file does not exist. Exiting..."
#  exit 1
fi

############# Checking SELinux status ##################
#seLinuxStatus="$(sestatus | grep -i 'SELinux status' | awk '{print $3}')"
#if [ "$seLinuxStatus" = 'enabled' ]; then 
#       _print_and_log "Se Linux Status: enabled!"
#		_print_and_log "[Failed]"
#    exit 1
#else
#	_print_and_log "Se Linux Status: disabled!"
#	_print_and_log "[Success]"
#fi

############## Loop over all databases and check database connection ################

TIME_OUT=1200
i=0
for data in "iam_im-imobjectstoredb" "iam_im-imtaskpersistencedb" "iam_im-imarchivedb" "iam_im-imauditdb" "iam_im-imreportsnapshotdb" "iam_im-imworkflowdb" 
do
	retval=1
	imobjectstoredb_output="false"
	while [ "$i" -le "$TIME_OUT" ]; do 
		_checkDBConn "$data"
		
		if [ "$imobjectstoredb_output" = "false" ]; then
			i=`expr $i + 10`
				
			_print_and_log "[sleep for 10 seconds and retrying ...]"
			sleep 10
		else
			break
		fi
	done
done

if [ $retval -eq 1 ]
then
        exit 1
fi
############## Check CA Directory Userstore connection ################
retval=1
_checkCADirConn
if [ $retval -eq 1 ]
then
        exit 1
fi

retval=1
_checkProvSrvConn
if [ $retval -eq 1 ]
then
        exit 1
fi

retval=1
_checkConnSrvConn
if [ $retval -eq 1 ]
then
        exit 1
fi

_end_msg
