<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans default-lazy-init="false" default-autowire="no" default-dependency-check="none">

    <bean class="com.ca.jcs.ImplBundle" parent="sdkcompound">
<property name="defaultConnectorConfig">
<bean class="com.ca.jcs.meta.MetaConnectorConfig" lazy-init="default" autowire="default" dependency-check="default">

                <property name="caseSensitive">
                    <value>true</value>
                </property>
                
                <!--  Set to true to allow metadata / opbindings changes via
                            LDAP MODIFY  -->
                <property name="allowMetadataModify">
                    <value>true</value>
                </property>

                <!-- For an example of how pool configuration settings can be specified,
                        look at JNDI connector's conf/connector.xml
                <property name="poolConfig">
                    <bean class="com.ca.commons.cfg.GenericObjectPoolConfigBeanWrapper">
                            ....
                    </bean>
                </property>
                -->

                <property name="validators">
                    <bean class="com.ca.jcs.cfg.MetaPluginConfigSuite" lazy-init="default" autowire="default" dependency-check="default">
                        <property name="typeToPluginMap">
                            <map>
                                <!--defines a validator for attributes which should not contain
                            commas in their values -->
                                <entry key="FLEXI_STR:noComma">
                                    <bean class="com.ca.jcs.sdk.validator.NoCommaAttributeValidator" lazy-init="default" autowire="default" dependency-check="default"/>
                                </entry>
                            </map>
                        </property>
                    </bean>
                </property>
                <property name="converters">
                    <bean class="com.ca.jcs.cfg.MetaPluginConfigSuite" lazy-init="default" autowire="default" dependency-check="default">
                        <!--<property name="propertyPluginConfigs">-->
                            <!--<list>-->

                                <!--<bean class="com.ca.jcs.cfg.MetaPluginConfig">-->
                                    <!--<property name="pluginClass">-->
                                        <!--<value>com.ca.jcs.sdk.converter.DemoFlattenPropertyConverter</value>-->
                                    <!--</property>-->
                                    <!--<property name="metadataPropNames">-->
                                        <!--<list>-->
                                            <!--<value>flattenSeparator</value>-->
                                        <!--</list>-->
                                    <!--</property>-->
                                    <!--<property name="pluginConfig">-->
                                        <!-- This syntax must be used to reference an inner class in Spring XML -->
                                        <!--<bean class="com.ca.jcs.sdk.converter.DemoFlattenPropertyConverter$DemoFlattenConfig">-->
                                            <!--<property name="valueSeparatorString">-->
                                                <!--<value>@@@FROM_CONNECTOR_XML@@@</value>-->
                                            <!--</property>-->
                                        <!--</bean>-->
                                    <!--</property>-->
                                <!--</bean>-->

                                <!-- Example of how a plug-in registered in server_jcs.xml-->
                       <!--can be deactivated, by being overridden with different-->
                       <!--configuration settings which will never match. We do this here so that the SDK-->
                       <!--and SDKSCRIPT connectors can share a single common datamodel metadata-->
                       <!--file, even though they flatten eTSDKGroupMembers using different converters. -->
                                <!--<bean class="com.ca.jcs.cfg.MetaPluginConfig">-->
                                    <!--<property name="pluginClass">-->
                                        <!--<value>com.ca.jcs.converter.meta.MultiValuePropertyFlattener</value>-->
                                    <!--</property>-->
                                    <!--<property name="metadataPropNames">-->
                                        <!--<list>-->
                                            <!--No datamodel properties will ever have this property set.-->
                                            <!--<value>!deregister!</value>-->
                                        <!--</list>-->
                                    <!--</property>-->
                                <!--</bean>-->
                            <!--</list>-->
                        <!--</property>-->
                        <property name="classPluginConfigs">
                            <list>
                                <!-- Note we make use of support for optional configuration -->
                                <bean class="com.ca.jcs.cfg.MetaPluginConfig" lazy-init="default" autowire="default" dependency-check="default">
                                    <property name="type" value="COMPOUND_VALUE_CLASS_REF"/>
                                    <property name="pluginClass">
                                        <value>com.ca.jcs.converter.meta.JSONCompoundValueClassConverter</value>
                                    </property>
                                    <property name="pluginConfig">
                                        <bean class="com.ca.jcs.converter.meta.JSONCompoundValueClassConverter$Config" lazy-init="default" autowire="default" dependency-check="default">
                                            <property name="convertToString" value="true"/>
                                        </bean>
                                    </property>
                                </bean>
                            </list>
                        </property>
                    </bean>
                </property>

                <property name="validateToConnector">
                    <value>true</value>
                </property>

                <property name="validateFromConnector">
                    <value>false</value>
                </property>

                <!-- If true then a search requesting all attributes be returned (search control's return attribute ids array is null),
                     will only returned attributes not marked as "expensive" in the matadata (e.g. photographs or associative relationships).
                     Expensive attributes can still be returned but must be explicitly requested. Note lookups requesting all attribute
                     values will get both cheap and expensive ones, as only a single object is targeted. -->
                <property name="searchExpensiveAttrs">
                    <value>false</value>
                </property>

            </bean>
</property>
</bean>

</beans>
