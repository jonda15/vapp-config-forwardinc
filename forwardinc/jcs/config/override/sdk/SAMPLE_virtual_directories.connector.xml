<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN"
        "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>
    <bean class="com.ca.jcs.ImplBundle" parent="sdk">
        <!-- Note that all settings here will override values in the conf/connector.xml
            within the jcs-connector-*.jar, but the JCS will still run fine if this file
            is deleted entirely as it will fallback to the version within the jcs-connector-*.jar. -->
        <property name="defaultConnectorConfig">
        
            <bean class="com.ca.jcs.meta.MetaConnectorConfig">
            
				<!--  Set to true to allow metadata / opbindings changes via
            			LDAP MODIFY  -->
				<property name="allowMetadataModify">
		            <value>true</value>
		        </property>
        
        		<!-- Believe it or not, the PPS provides no filtering at all (not even on naming attribute). -->
				<property name="allowNonFilterableNamingAttrs">
		            <value>true</value>
		        </property>
		        
                    <!-- For an example of how pool configuration settings can be specified,
                        look at JNDI connector's conf/connector.xml
                <property name="poolConfig">
                    <bean class="com.ca.commons.cfg.GenericObjectPoolConfigBeanWrapper">
                            ....
                    </bean>
                </property>
                -->

                <property name="validators">
                    <bean class="com.ca.jcs.cfg.MetaPluginConfigSuite">
                        <property name="typeToPluginMap">
                            <map>
                                    <!--defines a validator for attributes which should not contain
                                        commas in their values -->
                                <entry key="FLEXI_STR:noComma">
                                    <bean class="com.ca.jcs.sdk.validator.NoCommaAttributeValidator"/>
                                </entry>
                            </map>
                        </property>
                    </bean>
                </property>
                <property name="converters">
                    <bean class="com.ca.jcs.cfg.MetaPluginConfigSuite">
                        <property name="propertyPluginConfigs">
                            <list>
                                 <bean class="com.ca.jcs.cfg.MetaPluginConfig">
                                    <property name="pluginClass">
                                        <value>com.ca.jcs.sdk.converter.DemoFlattenPropertyConverter</value>
                                    </property>
                                     <property name="metadataPropNames">
                                         <list>
                                             <value>flattenSeparator</value>
                                         </list>
                                     </property>
                                    <property name="pluginConfig">
                                         <!-- This syntax must be used to reference an inner class in Spring XML -->
                                      <bean class="com.ca.jcs.sdk.converter.DemoFlattenPropertyConverter$DemoFlattenConfig">
                                        <property name="valueSeparatorString">
                                            <value>@@@FROM_CONNECTOR_XML@@@</value>
                                        </property>
                                      </bean>
                                    </property>
                                 </bean>

                                    <!-- Example of how a plug-in registered in server_jcs.xml
                                        can be deactivated, by being overridden with different
                                        configuration settings which will never match. We do this here so that the SDK
                                        and SDKSCRIPT connectors can share a single common datamodel metadata
                                        file, even though they flatten eTSDKGroupMembers using different converters. -->
                                 <bean class="com.ca.jcs.cfg.MetaPluginConfig">
                                    <property name="pluginClass">
                                        <value>com.ca.jcs.converter.meta.MultiValuePropertyFlattener</value>
                                    </property>
                                    <property name="metadataPropNames">
                                        <list>
                                                <!-- No datamodel properties will ever have this property set. -->
                                            <value>!deregister!</value>
                                        </list>
                                    </property>
                                 </bean>
                            </list>
                        </property>
                    </bean>
                </property>

                <property name="validateToConnector">
                    <value>true</value>
                </property>

                <property name="validateFromConnector">
                    <value>false</value>
                </property>

                <property name="caseSensitive">
                    <value>true</value>
                </property>

                <!-- If true then a search requesting all attributes be returned (search control's return attribute ids array is null),
                     will only returned attributes not marked as "expensive" in the matadata (e.g. photographs or associative relationships).
                     Expensive attributes can still be returned but must be explicitly requested. Note lookups requesting all attribute
                     values will get both cheap and expensive ones, as only a single object is targetted. -->
                <property name="searchExpensiveAttrs">
                    <value>false</value>
                </property>

                <property name="containerBaseObjectClass">
                    <value>eTSDKDirectory</value>
                </property>
                <property name="virtualContainers">
                    <list>
                        <bean class="com.ca.jcs.VirtualContainerConfig">
                            <property name="name">
                                <value>SDK Accounts</value>
                            </property>
                            <property name="objectClass">
                                <value>eTSDKAccountContainer</value>
                            </property>
                            <property name="namingAttribute">
                                <value>eTSDKAccountContainerName</value>
                            </property>
                            <property name="containedObjectClasses">
                                <list>
                                    <value>eTSDKAccount</value>
                                </list>
                            </property>
                        </bean>
                        <bean class="com.ca.jcs.VirtualContainerConfig">
                            <property name="name">
                                <value>SDK Groups</value>
                            </property>
                            <property name="objectClass">
                                <value>eTSDKGroupContainer</value>
                            </property>
                            <property name="namingAttribute">
                                <value>eTSDKGroupContainerName</value>
                            </property>
                            <property name="containedObjectClasses">
                                <list>
                                    <value>eTSDKGroup</value>
                                </list>
                            </property>
                        </bean>
                    </list>
                </property>
            </bean>
        </property>
    </bean>
</beans>
